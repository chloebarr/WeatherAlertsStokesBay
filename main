#stokes bay weather script


#import sns client
import boto3

#import requests library
import requests

#import date time stuff
import datetime

#import sns client
import boto3
from botocore import UNSIGNED
from botocore.client import Config

#queue url
queue_url='INSERT AWS SNS QUEUE URL'


def runWeather():
    #a function that decides wether or not to send a weather alert
    #create client first
    sqs = CreateSqsClient()
    response = getMessage(sqs)
    #set current dat time and 30 mins time, weather API uses UTC time
    currentDT = datetime.datetime.now(datetime.timezone.utc)
    newDT = currentDT + datetime.timedelta(minutes=30)


    if 'Messages' not in response:

        wind = windDecision()
        if wind[0] == True:
            sendWind(wind[1])
            #Send message to SQS queue
            sendMessage(newDT,sqs)
            print("Alertfromhere")
        else:
            #Send message to SQS queue
            sendMessage(newDT,sqs)
    else:
        #set message receipt handle
        rcHandle = response['Messages'][0]['ReceiptHandle']
        timeStampFromMessage = response['Messages'][0]['Body']
        if compareTimes(timeStampFromMessage, sqs) == True:
            wind = windDecision()
            if wind[0] == True:
                sendWind(wind[1])
                #Send message to SQS queue
                print("Alertfrom")
                sendAndDeleteMessage(newDT,rcHandle, sqs)
            else:
                #Send message to SQS queue
                sendAndDeleteMessage(newDT,rcHandle, sqs)
        else:
            sendAndDeleteMessage(timeStampFromMessage,rcHandle, sqs)


# Create SQS client
def CreateSqsClient():
    sqs = boto3.client('sqs',region_name='eu-west-1',
            aws_access_key_id='INSERT USER ACCESS KEY ID ',
            aws_secret_access_key='INSERT USER ACCESS KEY',)
    return(sqs)


#SQS STUFF
def deleteMessage(rHandle, sqs):
    response = sqs.delete_message(
        QueueUrl=queue_url,
        ReceiptHandle=rHandle
        )


def getMessage(sqs):
    #get message from SQS queue
    response = sqs.receive_message(
        QueueUrl=queue_url,
        AttributeNames=[
            'All',
        ],
        MessageAttributeNames=[
            'string',
        ],
        MaxNumberOfMessages=10,
        VisibilityTimeout=123,
        WaitTimeSeconds=5,
        ReceiveRequestAttemptId='string'
    )
    return(response)



def compareTimes(foundStamp, sqs):
    #get current date time
    currentDT = datetime.datetime.now()
    newDT = currentDT + datetime.timedelta(minutes=30)
    timeToCompareString = foundStamp
    timeToCompare = datetime.datetime.strptime(timeToCompareString,
                                                "%Y-%m-%d %H:%M:%S.%f")
    toSendMessage = False
    if currentDT > timeToCompare:
        toSendMessage = True
    return(toSendMessage)


def sendAndDeleteMessage(timeToSet,rcForDelete,sqs):
        sendMessage(timeToSet, sqs)
        deleteMessage(rcForDelete, sqs)


def sendMessage(dateTimeStamp, sqs):
        response = sqs.send_message(
            QueueUrl=queue_url,
            DelaySeconds=10,
            MessageAttributes={
                'Title': {
                    'DataType': 'String',
                    'StringValue': 'Time stamp'
                },
                'Author': {
                    'DataType': 'String',
                    'StringValue': 'Clozza'
                },
                'WeeksOn': {
                    'DataType': 'Number',
                    'StringValue': '6'
                }
            },
            MessageBody=(
                str(dateTimeStamp)
            )
        )

        print(response['MessageId'])


#SNS STUFF
def getWind():
    URL = "https://weatherfile.com/capi/V02/loc/GBR00074/latest.json"
    HEADER = {'wf-tkn':"PUBLIC"}
    #send get request
    r = requests.get(url =URL, headers = HEADER)
    response = r.json()
    return(response)

def windDecision():
    windy = False
    response = getWind()
    #error checking
    if "data" not in response:
        print("Cant find 'data' key in json response")
    elif not len(response["data"]):
        print("Cant find dictionary inside 'data' key in json response")
    elif "wsc" not in response["data"][0]:
        print("Cant find 'WSC' key inside 'data' key in json response")
    elif isinstance(response["data"][0]["wsc"],float) == False:
        print("'WSC' key did not contain a float")
    else:
        #print wind after converting
        num = round(response["data"][0]["wsc"]*1.94384,2)
        #check that num is a float
        if isinstance(num,float) == True:
            #see if wind is above 20
            isItWindy = aboveTwenty(num)
            if isItWindy == True:
                windy = True
            return(windy, num)
        else:
            print("wind reading not found")


def aboveTwenty(windSpeed):
    isAbove =False
    if windSpeed > 20 :
        isAbove = True
    return(isAbove)


def sendWind(windSpeed):
    sns = boto3.client('sns',region_name='eu-west-1',
            aws_access_key_id='INSERT USER ACCESS KEY ID',
            aws_secret_access_key='INSERT USER ACCESS KEY',)
    response = sns.publish(
    Message='Windspeed at Stokes: ' + str(windSpeed),
    Subject='Stokes Bay Weather Station',
    TopicArn='INSERT AWS SNS TOPIC ARN')
